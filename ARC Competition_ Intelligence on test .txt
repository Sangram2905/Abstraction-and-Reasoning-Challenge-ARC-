{"cells":[{"metadata":{},"cell_type":"markdown","source":"# **Introduction**\n\n**Abstraction and Reasoning Challenge** :  As a beginner to look up this Challenge and comparing to our High school ABSTRACT REASONING TESTS Questions.\n\nIn this note book I like to solve this problem and it will show how we can use data visualization & Machine learning in python\n\n\n"},{"metadata":{},"cell_type":"markdown","source":"# **Contents:**\n\n**Preparing the ground**\n* About the Data #Code to exract some formats\n\n* Import libraries and define hyperparameters\n* Load the ARC data\n\n**Basic exploration**\n* Look at few train/test input/output pairs\n* Number frequency\n* Matrix mean values\n* Matrix heights\n* Matrix widths\n* Height vs. Width\n\n**Data processing**\n\n1. Modeling (Under process)\n1. Training and postprocessing (Under process)\n1. Loss (MAE) (Under process)\n1. Backpropagation and optimization (Under process)\n\n**Submission**\n\n**Ending note**\n"},{"metadata":{},"cell_type":"markdown","source":"# Preparing the ground"},{"metadata":{},"cell_type":"markdown","source":"**About the Data**"},{"metadata":{},"cell_type":"markdown","source":"#The task is consist of JSON file where each JSON file comes with following pairs:\n\nTask dictionary -> Test & Train list -> Train & Train Dictionary ->Input & output list-> Color data list \n1.\tWe can divide the data in following to simplify and Solvable formats\n2.\tMaximum grid is divided in  1X1 to 30X30 Rows X Columns \n3.\tGrid also can divide in 3 parts\n\n    a.\tSmall input big output\n    \n    b.\tBig Input Small output\n    \n    c.\tEqual input equal output\n    \n    d.\tSimple Input to (Simple, Medium or Hard) Output\n    \n    e.\tMedium Input to (Simple, Medium or Hard) Output\n   \n    f.\tHard Input to (Simple, Medium or Hard) Output\n   \n4.\tAbove Complex patterns calculated by grid size.\n5.\tColumns & rows can be sub divided as:\n    a.\tEven rows even columns\n    b.\tEven rows odd columns\n    c.\tOdd rows odd columns\n    d.\tOdd rows even columns\n\n6.\tNumber of pairs in one Train or test sets.\n\n#7.\tThe core data “Color” is of type 10\n\n8.\tThe direction of color movement \n    a.\tClockwise\n    b.\tAnti-clockwise\n    c.\tRepetition of input to output\n9.\tComplexity of colors : simple, medium & hard calculated  by (Sum) of color in set.\n![image.png](attachment:image.png)\n \n\n10.\tIf we can classify the data in above then its easy to solve the Simple & medium set.\n\n","attachments":{"image.png":{"image/png":""}}},{"metadata":{"trusted":true},"cell_type":"code","source":"# -*- coding: utf-8 -*-\n\"\"\"\nCreated on Mon Apr 20 18:09:37 2020\n\n@author: Sangram Phadke\n\"\"\"\nimport numpy as np\nimport pandas as pd\n\nimport os\nimport json\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n\n# for dirname, _, filenames in os.walk('Abstraction-and-Reasoning-Challenge'):\n#     print(dirname)\n    \n\ndata_path = Path('training')\ntraining_path = data_path\n\n\ntraining_tasks = sorted(os.listdir(training_path))\n\nlist_training_tasks = []\nlist_training_tasks.append(training_tasks)\n\nalist_training_tasks =np.array(list_training_tasks).reshape(400,1)\ndf = pd.DataFrame(data = alist_training_tasks)\n\n#print(training_tasks[:3])\n\n# task_file = str(training_path / '0520fde7.json')\n# task_file = str(training_path / 'bd4472b8.json')\n#df = pd.DataFrame(,columns='') \n\nlist_training_tasks_number = []\n\n\nlist_train_pairs=[]\n\n\nrows_train_input  = []\n\n\ncolumns_train_input = []\n\n\ntask_file_name = []\n\ncolour_train_input = []\n\n\nrows_train_output  = []\n\n\ncolumns_train_output = [] \n\ncolour_train_output = []\n\nlist_test_pairs=[]\n\n\nrows_test_input = []\n\ncolumns_test_input = []\n\ncolour_test_input = [] \n\nrows_test_output = []\n\ncolumns_test_output = []\n\ncolour_test_output = [] \n\n\n\n\nfor i in [0]:\n    list_training_tasks_number.append(i)\n\n    task_file = str(training_path / training_tasks[i])\n   \n    task_file_name.append(task_file)\n\n\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n\n\n    # task dictionary\n    # print(task.keys())\n    # print('\\n') \n    \n    n_train_pairs = len(task['train'])\n    list_train_pairs.append(n_train_pairs)\n    \n    n_test_pairs = len(task['test'])\n    list_test_pairs.append(n_test_pairs)\n    \n    #print(f'task contains {n_train_pairs} training pairs\\n')\n    #print(f'task contains {n_test_pairs} test pairs\\n')\n\n\n   \n    \n    for tp in range(0,n_train_pairs):\n        \n        #number of rows of each train input\n        rtp = len(task['train'][tp]['input'])\n        #print('Rows   of  train input {} of grid {} : '.format(tp,i),len(task['train'][tp]['input']))\n        rows_train_input.append(rtp)\n        \n        #number of columns of each train input\n        ctp = task['train'][tp]['input']\n        actp = np.array(ctp).shape\n        ##print('Columns of train input {} of grid {} : '.format(tp,i),(actp[1]))\n        columns_train_input.append(actp[1])\n\n        #number of color of each train input\n        cotp = task['train'][tp]['input']\n        #print('Colour of train input {} of grid {} : '.format(tp,i),task['train'][tp]['input'])\n        colour_train_input.append(cotp)\n        \n        #number of rows of each train output\n        rotp = len(task['train'][tp]['output'])\n        #print('Rows of train output {} of grid {} : '.format(tp,i),len(task['train'][tp]['output']))\n        rows_train_output.append(rotp)\n        \n        #number of columns of each train output\n        cotp = task['train'][tp]['output']\n        acotp = np.array(cotp).shape\n        #print('Columns of train output {} of grid {} :'.format(tp,i),(acotp[1]))\n        columns_train_output.append(acotp[1])\n        \n        #number of colors of each train output\n        fcolro = task['train'][tp]['output']\n        #print('Colour of train output {} of grid {} : '.format(tp,i),task['train'][tp]['output']) \n        colour_train_output.append(fcolro)\n\n    for te in range(0,n_test_pairs):\n        \n        #number of rows of each test input\n        frite = len(task['test'][te]['input'])\n        #print('Rows of train input {} of grid {} : '.format(te,i),len(task['test'][te]['input']))\n        rows_test_input.append(frite)\n        \n        #number of columns of each test input  \n        fcite = task['test'][te]['input']\n        afcite = np.array(fcite).shape\n        #print('Columns of train input {} of grid {} :'.format(te,i),afcite[1])\n        columns_test_input.append(afcite[1])\n        \n        #number of colours of each test input\n        fcolrto = task['test'][te]['input']\n        #print('Colour of train input {} of grid {} : '.format(te,i),task['test'][te]['input'])\n        colour_test_input.append(fcolrto)\n        \n        #number of rows of each test output\n        frote = len(task['test'][te]['output'])\n        #print('Rows of train output {} of grid {} : '.format(te,i),len(task['test'][te]['input']))\n        rows_test_output.append(frote)\n        \n        #number of columns of each test output\n        fcote = task['test'][te]['output']\n        afcote = np.array(fcote).shape\n        #print('Columns of train input {} of grid {} :'.format(te,i),afcote[1])\n        columns_test_output.append(afcote[1])\n        \n        #number of colours of each test output\n        fcolrtoo = task['test'][te]['output']\n        #print('Colour of train output {} of grid {} : '.format(te,i),task['test'][te]['input'])\n        colour_test_output.append(fcolrtoo)\n        \n\n\nalist_training_tasks_number = np.array(list_training_tasks_number)\ndf0 = pd.DataFrame(list_training_tasks_number,columns=['list_training_tasks_number'])\n\n\nalist_train_pairs = np.array(list_train_pairs)\ndf1 = pd.DataFrame(alist_train_pairs,columns=['list_train_pairs']) \n\narows_train_input = np.array(rows_train_input)\ndf2 = pd.DataFrame(arows_train_input,columns=['rows_train_input']) \n\nacolumns_train_input = np.array(columns_train_input)\ndf3 = pd.DataFrame(acolumns_train_input,columns=['columns_train_input']) \n\n# atask_file_name = np.array(task_file_name)\n# df4 = pd.DataFrame(task_file_name)\n\nacolour_train_input = np.array(colour_train_input)\ndf5 = pd.DataFrame(colour_train_input)\n\narows_train_output = np.array(rows_train_output)\ndf6 = pd.DataFrame(arows_train_output,columns=['rows_train_output'])\n\nacolumns_train_output = np.array(columns_train_output)\ndf7 = pd.DataFrame(acolumns_train_output,columns=['columns_train_output'])\n\nacolour_train_output = np.array(colour_train_output)\ndf8 = pd.DataFrame(colour_train_output )\n\nalist_test_pairs = np.array(list_test_pairs)\ndf9 = pd.DataFrame(alist_test_pairs ,columns=['list_test_pairs'])\n\narows_test_input = np.array(rows_test_input)\ndf10 = pd.DataFrame(arows_test_input,columns=['rows_test_input'])\n\nacolumns_test_input = np.array(columns_test_input)\ndf11 = pd.DataFrame(acolumns_test_input,columns=['columns_test_input'])\n\nacolour_test_input = np.array(colour_test_input)\ndf12 = pd.DataFrame(colour_test_input)\n\narows_test_output = np.array(rows_test_output)\ndf13 = pd.DataFrame(arows_test_output,columns=['rows_test_output'])\n\nacolumns_test_output = np.array(columns_test_output)\ndf14 = pd.DataFrame(acolumns_test_output,columns=['columns_test_output'])\n\nacolour_test_output = np.array(colour_test_output)\ndf15 = pd.DataFrame(colour_test_output)\n\ndf_all=pd.concat([df0,df1,df2,df3,df5,df6,df7,df8,df9,df10,df11,df12,df13,df14,df15],axis=1)\n\n\n#df_all.to_csv('file1.csv',index=False)\n\n#Un-comment to take print of file.\n\n\n\n# #display the task\n# def plot_task(task):\n#     \"\"\"\n#     Plots the first train and test pairs of a specified task,\n#     using same color scheme as the ARC app\n#     \"\"\"\n#     cmap = colors.ListedColormap(\n#         ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n#           '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n#     norm = colors.Normalize(vmin=0, vmax=9)\n#     fig, axs = plt.subplots(1, 4, figsize=(15,15))\n#     axs[0].imshow(task['train'][0]['input'], cmap=cmap, norm=norm)\n#     axs[0].axis('off')\n#     axs[0].set_title('Train Input')\n#     axs[1].imshow(task['train'][0]['output'], cmap=cmap, norm=norm)\n#     axs[1].axis('off')\n#     axs[1].set_title('Train Output')\n#     axs[2].imshow(task['test'][0]['input'], cmap=cmap, norm=norm)\n#     axs[2].axis('off')\n#     axs[2].set_title('Test Input')\n#     axs[3].imshow(task['test'][0]['output'], cmap=cmap, norm=norm)\n#     axs[3].axis('off')\n#     axs[3].set_title('Test Output')\n#     plt.tight_layout()\n#     plt.show()\n# plot_task(task)\n\n\n\n\n","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## Import libraries and define hyperparameters"},{"metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"cell_type":"code","source":"import os\nimport gc\nimport cv2\nimport json\nimport time\n\nimport numpy as np\nimport pandas as pd\n\nfrom pathlib import Path\nfrom keras.utils import to_categorical\n\nimport seaborn as sns\nimport plotly.express as px\nimport matplotlib.pyplot as plt\nfrom matplotlib import colors\n\nimport plotly.figure_factory as ff\n\nimport torch\nT = torch.Tensor\nimport torch.nn as nn\nfrom torch.optim import Adam\nfrom torch.utils.data import Dataset, DataLoader","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"TEST_PATH = Path('../input/abstraction-and-reasoning-challenge/')\nSUBMISSION_PATH = Path('../input/abstraction-and-reasoning-challenge/')\n\nTEST_PATH = TEST_PATH / 'test'\nSUBMISSION_PATH = SUBMISSION_PATH / 'sample_submission.csv'","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## Load the ARC data"},{"metadata":{},"cell_type":"markdown","source":"### Get testing tasks"},{"metadata":{"trusted":true},"cell_type":"code","source":"test_task_files = sorted(os.listdir(TEST_PATH))\n\ntest_tasks = []\nfor task_file in test_task_files:\n    with open(str(TEST_PATH / task_file), 'r') as f:\n        task = json.load(f)\n        test_tasks.append(task)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"### Extract training and testing data"},{"metadata":{"trusted":true},"cell_type":"code","source":"Xs_test, Xs_train, ys_train = [], [], []\n\nfor task in test_tasks:\n    X_test, X_train, y_train = [], [], []\n\n    for pair in task[\"test\"]:\n        X_test.append(pair[\"input\"])\n\n    for pair in task[\"train\"]:\n        X_train.append(pair[\"input\"])\n        y_train.append(pair[\"output\"])\n    \n    Xs_test.append(X_test)\n    Xs_train.append(X_train)\n    ys_train.append(y_train)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"matrices = []\nfor X_test in Xs_test:\n    for X in X_test:\n        matrices.append(X)\n        \nvalues = []\nfor matrix in matrices:\n    for row in matrix:\n        for value in row:\n            values.append(value)\n            \nTest_df = pd.DataFrame(values)\nTest_df.columns = [\"values\"]","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Basic exploration"},{"metadata":{},"cell_type":"markdown","source":"## Look at a few train/test input/output pairs\nThese are some of the pairs present in the training data. "},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"data_path = Path('/kaggle/input/abstraction-and-reasoning-challenge/')\ntraining_path = data_path / 'training'\ntraining_tasks = sorted(os.listdir(training_path))\n\nfor i in [1, 19, 8, 15, 9]:\n\n    task_file = str(training_path / training_tasks[i])\n\n    with open(task_file, 'r') as f:\n        task = json.load(f)\n\n    def plot_task(task):\n        \"\"\"\n        Plots the first train and test pairs of a specified task,\n        using same color scheme as the ARC app\n        \"\"\"\n        cmap = colors.ListedColormap(\n            ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',\n             '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])\n        norm = colors.Normalize(vmin=0, vmax=9)\n        fig, ax = plt.subplots(1, 4, figsize=(15,15))\n        ax[0].imshow(task['train'][0]['input'], cmap=cmap, norm=norm)\n        width = np.shape(task['train'][0]['input'])[1]\n        height = np.shape(task['train'][0]['input'])[0]\n        ax[0].set_xticks(np.arange(0,width))\n        ax[0].set_yticks(np.arange(0,height))\n        ax[0].set_xticklabels([])\n        ax[0].set_yticklabels([])\n        ax[0].tick_params(length=0)\n        ax[0].grid(True)\n        ax[0].set_title('Train Input')\n        ax[1].imshow(task['train'][0]['output'], cmap=cmap, norm=norm)\n        width = np.shape(task['train'][0]['output'])[1]\n        height = np.shape(task['train'][0]['output'])[0]\n        ax[1].set_xticks(np.arange(0,width))\n        ax[1].set_yticks(np.arange(0,height))\n        ax[1].set_xticklabels([])\n        ax[1].set_yticklabels([])\n        ax[1].tick_params(length=0)\n        ax[1].grid(True)\n        ax[1].set_title('Train Output')\n        ax[2].imshow(task['test'][0]['input'], cmap=cmap, norm=norm)\n        width = np.shape(task['test'][0]['input'])[1]\n        height = np.shape(task['test'][0]['input'])[0]\n        ax[2].set_xticks(np.arange(0,width))\n        ax[2].set_yticks(np.arange(0,height))\n        ax[2].set_xticklabels([])\n        ax[2].set_yticklabels([])\n        ax[2].tick_params(length=0)\n        ax[2].grid(True)\n        ax[2].set_title('Test Input')\n        ax[3].imshow(task['test'][0]['output'], cmap=cmap, norm=norm)\n        width = np.shape(task['test'][0]['output'])[1]\n        height = np.shape(task['test'][0]['output'])[0]\n        ax[3].set_xticks(np.arange(0,width))\n        ax[3].set_yticks(np.arange(0,height))\n        ax[3].set_xticklabels([])\n        ax[3].set_yticklabels([])\n        ax[3].tick_params(length=0)\n        ax[3].grid(True)\n        ax[3].set_title('Test Output')\n        plt.tight_layout()\n        plt.show()\n\n    plot_task(task)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"## Number frequency <a id=\"number-frequency\"></a>"},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"px.histogram(df, x=\"values\", title=\"Numbers present in matrices\")","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"From the above graph, we can clearly see that the number distribution has a string positive skew. Most numbers in the matrices are clearly 0. This is reflected by the dominance of black color in most matrices."},{"metadata":{},"cell_type":"markdown","source":"## Matrix mean values <a id=\"matrix-mean-values\"></a>"},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"means = [np.mean(X) for X in matrices]\nfig = ff.create_distplot([means], group_labels=[\"Means\"], colors=[\"green\"])\nfig.update_layout(title_text=\"Distribution of matrix mean values\")","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"From the above graph, we can see that lower means are more common than higher means. The graph, once again, has a strong positive skew. This is further proof that black is the most dominant color in the matrices."},{"metadata":{},"cell_type":"markdown","source":"## Matrix heights <a id=\"matrix-heights\"></a>"},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"heights = [np.shape(matrix)[0] for matrix in matrices]\nwidths = [np.shape(matrix)[1] for matrix in matrices]","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"fig = ff.create_distplot([heights], group_labels=[\"Height\"], colors=[\"magenta\"])\nfig.update_layout(title_text=\"Distribution of matrix heights\")","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"From the above graph, we can see that matrix heights have a much more uniform distribution (with significantly less skew). The distribution is somewhat normal with a mean of approximately 15."},{"metadata":{},"cell_type":"markdown","source":"## Matrix widths <a id=\"matrix-widths\"></a>"},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"fig = ff.create_distplot([widths], group_labels=[\"Width\"], colors=[\"red\"])\nfig.update_layout(title_text=\"Distribution of matrix widths\")","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"From the above graph, we can see that matrix widths also have a uniform distribution (with significantly less skew). The distribution is also somewhat uniform with a mean of approximately 16."},{"metadata":{},"cell_type":"markdown","source":"## Height vs. Width <a id=\"height-vs-width\"></a>"},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"plot = sns.jointplot(widths, heights, kind=\"kde\", color=\"blueviolet\")\nplot.set_axis_labels(\"Width\", \"Height\", fontsize=14)\nplt.show(plot)","execution_count":null,"outputs":[]},{"metadata":{"_kg_hide-input":true,"trusted":true},"cell_type":"code","source":"plot = sns.jointplot(widths, heights, kind=\"reg\", color=\"blueviolet\")\nplot.set_axis_labels(\"Width\", \"Height\", fontsize=14)\nplt.show(plot)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"From the above graphs, we can see that heights and widths have a strong positive correlation, *i.e.* greater widths generally result in greater heights. This is consistent with the fact that most matrices are square-shaped."},{"metadata":{},"cell_type":"markdown","source":"### Define function to flatten submission matrices"},{"metadata":{"trusted":true},"cell_type":"code","source":"#Submission \n\ndef flattener(pred):\n    str_pred = str([row for row in pred])\n    str_pred = str_pred.replace(', ', '')\n    str_pred = str_pred.replace('[[', '|')\n    str_pred = str_pred.replace('][', '|')\n    str_pred = str_pred.replace(']]', '|')\n    return str_pred","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"### Prepare submission dataframe"},{"metadata":{"trusted":true},"cell_type":"code","source":"test_predictions = [[list(pred) for pred in test_pred] for test_pred in test_predictions]\n\nfor idx, pred in enumerate(test_predictions):\n    test_predictions[idx] = flattener(pred)\n    \nsubmission = pd.read_csv(SUBMISSION_PATH)\nsubmission[\"output\"] = test_predictions","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"### Convert submission to .csv format"},{"metadata":{"trusted":true},"cell_type":"code","source":"submission.head()","execution_count":null,"outputs":[]},{"metadata":{"trusted":true},"cell_type":"code","source":"submission.to_csv(\"submission.csv\", index=False)","execution_count":null,"outputs":[]},{"metadata":{},"cell_type":"markdown","source":"# Ending note:\n\nFrom the other Notebooks Copyed the code to read the data in my note book. rest of the core code & analysis is my own (Feel free to do same with this note book if you find valuable)\n\nImp Note: Big thanks to  Walter & Tarun Paparaju many more..\n\nPease upvote if like it."}],"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"}},"nbformat":4,"nbformat_minor":4}